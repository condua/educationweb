import { useState, useRef } from "react";
import { FaPaperPlane, FaRobot, FaTimes } from "react-icons/fa";

export default function Chatbot() {
  const [isOpen, setIsOpen] = useState(false);
  const [inputValue, setInputValue] = useState("");
  const [messages, setMessages] = useState([
    { sender: "bot", text: "Xin ch√†o! H√£y nh·∫≠p c√¢u h·ªèi b√™n d∆∞·ªõi." },
  ]);
  const [isLoading, setIsLoading] = useState(false);
  const chatContentRef = useRef(null);
  const formatBotMessage = (text) => {
    return text
      .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>") // b√¥i ƒë·∫≠m
      .replace(/\n/g, "<br/>") // xu·ªëng d√≤ng
      .replace(
        /(https?:\/\/[^\s<]+)/g,
        '<a href="$1" class="text-sky-400 underline" target="_blank" rel="noopener noreferrer">$1</a>'
      ) // link
      .replace(
        /([\w.+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,})/g,
        '<a href="mailto:$1" class="text-sky-400 underline">$1</a>'
      ) // email
      .replace(
        /(\b\d{9,11}\b)/g,
        '<a href="tel:$1" class="text-sky-400 underline">$1</a>'
      ); // s·ªë ƒëi·ªán tho·∫°i
  };

  const handleSend = async () => {
    const userText = inputValue.trim();
    if (!userText) return;

    // Hi·ªÉn th·ªã tin nh·∫Øn ng∆∞·ªùi d√πng
    setMessages((prev) => [...prev, { sender: "user", text: userText }]);
    setInputValue("");
    setIsLoading(true);

    try {
      const res = await fetch("https://openrouter.ai/api/v1/chat/completions", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${import.meta.env.VITE_OPENROUTER_API_KEY}`,
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          model: "deepseek/deepseek-chat",
          messages: [
            // { role: "system", content: "B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o th√¢n thi·ªán." },
            {
              role: "system",
              content: `B·∫°n l√† m·ªôt tr·ª£ l√Ω ·∫£o c·ªßa c√¥ng ty Gi√°o d·ª•c v√† C√¥ng ngh·ªá MLPA. D∆∞·ªõi ƒë√¢y l√† m·ªôt s·ªë th√¥ng tin b·∫°n c·∫ßn nh·ªõ ƒë·ªÉ tr·∫£ l·ªùi ng∆∞·ªùi d√πng:
              - MLPA ƒë∆∞·ª£c th√†nh l·∫≠p v√†o th√°ng 3 nƒÉm 2025 b·ªüi Phan Ho√†ng Ph√∫c, c·ª±u sinh vi√™n tr∆∞·ªùng ƒê·∫°i h·ªçc B√°ch Khoa Th√†nh ph·ªë H·ªì Ch√≠ Minh
              - MLPA l√† n·ªÅn t·∫£ng gi√°o d·ª•c k·∫øt h·ª£p c√¥ng ngh·ªá AI, cung c·∫•p kh√≥a h·ªçc k·ªπ nƒÉng, ƒë√°nh gi√° nƒÉng l·ª±c v√†o c√°c tr∆∞·ªùng ƒë·∫°i h·ªçc h√†ng ƒë·∫ßu Vi·ªát Nam nh∆∞ ƒê·∫°i h·ªçc B√°ch Khoa Th√†nh ph·ªë H·ªì Ch√≠ Minh, 
              ƒê·∫°i h·ªçc Khoa h·ªçc t·ª± nhi√™n, ƒê·∫°i h·ªçc C√¥ng ngh·ªá th√¥ng tin, ƒê·∫°i h·ªçc Khoa h·ªçc x√£ h·ªôi v√† nh√¢n vƒÉn, ngo·∫°i ng·ªØ, marketing, t∆∞ duy v√† l·∫≠p tr√¨nh. 
              - MLPA gi·∫£ng d·∫°y ƒë√°nh gi√° nƒÉng l·ª±c ƒê·∫°i h·ªçc Qu·ªëc gia th√†nh ph·ªë H·ªì Ch√≠ Minh v·ªõi c√°c n·ªôi dung sau:
              To√°n h·ªçc:

                C√°c d·∫°ng b√†i t·∫≠p v·ªÅ logic, ƒë·∫°i s·ªë, h√¨nh h·ªçc v√† x√°c su·∫•t th·ªëng k√™ ƒë·ªÉ ki·ªÉm tra t∆∞ duy logic v√† kh·∫£ nƒÉng gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ.

                B√†i t·∫≠p c√≥ th·ªÉ kh√¥ng ch·ªâ t·∫≠p trung v√†o c√°c c√¥ng th·ª©c quen thu·ªôc m√† c√≤n y√™u c·∫ßu th√≠ sinh v·∫≠n d·ª•ng to√°n h·ªçc v√†o vi·ªác ph√¢n t√≠ch c√°c t√¨nh hu·ªëng th·ª±c t·∫ø.

                Ng√¥n ng·ªØ v√† k·ªπ nƒÉng ƒë·ªçc hi·ªÉu (th∆∞·ªùng l√† Ti·∫øng Vi·ªát ho·∫∑c Ti·∫øng Anh):

                Ph√¢n t√≠ch, ƒë√°nh gi√° v√† tr√≠ch d·∫´n th√¥ng tin t·ª´ c√°c vƒÉn b·∫£n, b√†i b√°o, t√†i li·ªáu h·ªçc thu·∫≠t.

                Ki·ªÉm tra kh·∫£ nƒÉng bi·ªÉu ƒë·∫°t √Ω t∆∞·ªüng m·ªôt c√°ch m·∫°ch l·∫°c, nh·∫•t qu√°n v√† thuy·∫øt ph·ª•c th√¥ng qua c√°c b√†i vi·∫øt t·ª± lu·∫≠n.

                Ki·∫øn th·ª©c x√£ h·ªôi ‚Äì nh√¢n vƒÉn v√† khoa h·ªçc t·ª± nhi√™n:

                X√£ h·ªôi ‚Äì nh√¢n vƒÉn: Ki·∫øn th·ª©c n·ªÅn t·∫£ng v·ªÅ l·ªãch s·ª≠, vƒÉn ho√°, tri·∫øt h·ªçc v√† c√°c hi·ªán t∆∞·ª£ng x√£ h·ªôi, nh·∫±m ƒë√°nh gi√° kh·∫£ nƒÉng li√™n h·ªá gi·ªØa l√Ω thuy·∫øt v√† th·ª±c ti·ªÖn.

                Khoa h·ªçc t·ª± nhi√™n: C√°c nguy√™n l√Ω c∆° b·∫£n, ph∆∞∆°ng ph√°p khoa h·ªçc v√† kh·∫£ nƒÉng ph√¢n t√≠ch c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn v·∫≠t l√Ω, h√≥a h·ªçc ho·∫∑c sinh h·ªçc, tu·ª≥ thu·ªôc v√†o h∆∞·ªõng ƒë√†o t·∫°o c·ªßa th√≠ sinh.
              - MLPA ƒëem l·∫°i c√°c gi·∫£i ph√°p v·ªÅ c√¥ng ngh·ªá nh∆∞: T∆∞ v·∫•n x√¢y d·ª±ng v√† thi·∫øt k·∫ø website, h·ªó tr·ª£ marketing, qu·∫£ng b√° s·∫£n ph·∫©m, h·ªó tr·ª£ website SEO, t·ªëi ∆∞u t√™n mi·ªÅn...
              - Tr·ª• s·ªü t·∫°i ·∫§p Long Th√°i, x√£ Long Kh√°nh B, huy·ªán H·ªìng Ng·ª±, t·ªânh ƒê·ªìng Th√°p
              - ƒêƒÉng k√Ω h·ªçc qua website https://mlpa.site ho·∫∑c hotline 0399915548
              - C√≥ kh√≥a h·ªçc online v√† n·ªÅn t·∫£ng h·ªçc tr·ª±c tuy·∫øn.
              - Lu√¥n t√¨m ki·∫øm nh√¢n s·ª± t√¢m huy·∫øt, CV g·ª≠i qua phanhoangphuc0311@gmail.com
              - Fanpage c·ªßa MLPA: https://www.facebook.com/profile.php?id=61574532009854
              - Fanpage Facebook c√° nh√¢n: https://www.facebook.com/phuc.phanhoang.1694
              
              Khi ng∆∞·ªùi d√πng h·ªèi nh·ªØng g√¨ li√™n quan t·ªõi MLPA, h√£y ∆∞u ti√™n tr·∫£ l·ªùi d·ª±a tr√™n nh·ªØng th√¥ng tin tr√™n.`,
            },
            { role: "user", content: userText },
          ],
        }),
      });

      const data = await res.json();
      const reply =
        data.choices?.[0]?.message?.content || "Xin l·ªói, kh√¥ng c√≥ ph·∫£n h·ªìi.";
      setMessages((prev) => [...prev, { sender: "bot", text: reply }]);
    } catch (err) {
      console.error("L·ªói:", err);
      setMessages((prev) => [
        ...prev,
        { sender: "bot", text: "Xin l·ªói, c√≥ l·ªói x·∫£y ra." },
      ]);
    } finally {
      setIsLoading(false);
      setTimeout(() => {
        chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;
      }, 100);
    }
  };

  const handleKeyPress = (e) => {
    if (e.key === "Enter") {
      handleSend();
    }
  };

  return (
    <>
      {/* N√∫t m·ªü chatbot */}
      <button
        onClick={() => setIsOpen(true)}
        className="fixed bottom-6 right-6 bg-sky-500 hover:bg-sky-600 text-white text-2xl w-14 h-14 rounded-full shadow-lg z-[1000] flex items-center justify-center"
      >
        <FaRobot />
      </button>

      {/* Khung Chatbot */}
      {isOpen && (
        <div className="fixed bottom-[100px] right-6 w-80 bg-neutral-900 text-white rounded-xl shadow-2xl z-[999] flex flex-col animate-slideUp">
          {/* Header */}
          <div className="bg-sky-500 px-4 py-3 font-bold flex justify-between items-center rounded-t-xl">
            ü§ñ Chatbot AI
            <FaTimes
              className="cursor-pointer text-lg"
              onClick={() => setIsOpen(false)}
            />
          </div>

          {/* N·ªôi dung chat */}
          <div
            ref={chatContentRef}
            className="p-4 max-h-72 overflow-y-auto overflow-x-auto scrollbar-hide space-y-2 text-sm"
          >
            {messages.map((msg, idx) =>
              msg.sender === "bot" ? (
                <div
                  key={idx}
                  className="text-white"
                  dangerouslySetInnerHTML={{
                    __html: `<strong>Bot:</strong> ${formatBotMessage(
                      msg.text
                    )}`,
                  }}
                />
              ) : (
                <p key={idx}>
                  <strong>B·∫°n:</strong> {msg.text}
                </p>
              )
            )}

            {isLoading && (
              <p>
                <em>ƒêang tr·∫£ l·ªùi...</em>
              </p>
            )}
          </div>

          {/* Input */}
          <div className="flex border-t border-neutral-700">
            <input
              type="text"
              value={inputValue}
              onChange={(e) => setInputValue(e.target.value)}
              onKeyDown={handleKeyPress}
              placeholder="Nh·∫≠p c√¢u h·ªèi..."
              className="flex-1 px-4 py-2 bg-neutral-800 text-white border-none focus:outline-none"
            />
            <button
              onClick={handleSend}
              className="bg-sky-500 hover:bg-sky-600 text-white px-4 py-2"
            >
              <FaPaperPlane />
            </button>
          </div>
        </div>
      )}
    </>
  );
}
